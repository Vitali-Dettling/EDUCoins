package org.educoins.core.p2p.peers.remote;

import org.educoins.core.Block;
import org.educoins.core.p2p.peers.Peer;
import org.educoins.core.transaction.Transaction;
import org.educoins.core.utils.Sha256Hash;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.IOException;
import java.net.URI;
import java.util.Collection;

/**
 * The base class representing a remote note.
 * This interface should be implemented to exchange data with a specific node.
 * Created by typus on 11/3/15.
 */
public abstract class RemoteProxy {
    protected transient final Logger logger = LoggerFactory.getLogger(this.getClass());
    protected URI iNetAddress;
    protected String pubkey;
    protected int port;
    /**
     * Describes the level integrity of this Proxy.
     */
    protected int rating = 5;

    public RemoteProxy() {
    }

    public RemoteProxy(@NotNull URI iNetAddress, @NotNull String pubkey) {
        this.iNetAddress = iNetAddress;
        this.pubkey = pubkey;
    }

    /**
     * Returns all {@link Block#getHeader()}s from the specific {@link RemoteProxy}.
     *
     * @return All {@link Block#getHeader()}s the {@link RemoteProxy} knows.
     * @throws IOException if the communication went wrong.
     */
    @NotNull
    public abstract Collection<Block> getHeaders() throws IOException;

    /**
     * Returns all {@link Block}s from the specific {@link RemoteProxy}.
     *
     * @return All {@link Block}s the {@link RemoteProxy} knows
     * @throws IOException if the communication went wrong.
     */
    @NotNull
    public abstract Collection<Block> getBlocks() throws IOException;

    /**
     * Returns all {@link Block}s from the specific {@link RemoteProxy} which are newer then the specified {@link
     * Block#hash()}
     *
     * @param from the hash to start from.
     * @return All {@link Block}s the {@link RemoteProxy} knows
     * @throws IOException if the communication went wrong.
     */
    @NotNull
    public abstract Collection<Block> getBlocks(Sha256Hash from) throws IOException;


    /**
     * Returns a specific {@link Block} specified by {@link Block#hash()} from the specific {@link RemoteProxy}.
     *
     * @param hash the {@link Sha256Hash} generated by {@link Block#hash()}}.
     * @return the {@link Block} or <code>null</code> if not found.
     * @throws IOException if the communication went wrong.
     */
    @Nullable
    public abstract Block getBlock(Sha256Hash hash) throws IOException;

    /**
     * Transmits a specific {@link Block} to the remote node.
     *
     * @param block the {@link Block} to transmit.
     * @throws IOException if the communication went wrong.
     */
    public abstract void transmitBlock(Block block) throws IOException;

    /**
     * Transmits a specific {@link Transaction} to the remote node.
     *
     * @param transaction the {@link Transaction} to transmit.
     * @throws IOException if the communication went wrong.
     */
    public abstract void transmitTransaction(Transaction transaction) throws IOException;


    /**
     * Introduces itself to at least one other {@link Peer}.
     */
    public abstract Collection<RemoteProxy> hello() throws IOException;

    /**
     * Increases {@link RemoteProxy#rating}.
     */
    public void rateHigher() {
        ++rating;
    }

    /**
     * Decreases {@link RemoteProxy#rating}.
     */
    public void rateLower() {
        --rating;
    }

    /**
     * Ratings for RemoteProxies. On successful communication, the rate increases and decreases on failure. If the
     * rating is lower then zero, the Proxy will be removed from {@link org.educoins.core.p2p.peers.HttpProxyPeerGroup}.
     */
    public int getRating() {
        return rating;
    }

    public String getPubkey() {
        return pubkey;
    }

    public URI getiNetAddress() {
        return iNetAddress;
    }

    public int getPort() {
        return port;
    }

    public void setPort(int port) {
        this.port = port;
    }

    @Override
    public int hashCode() {
        int result = pubkey != null ? pubkey.hashCode() : 0;
        result = 31 * result + rating;
        return result;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        RemoteProxy that = (RemoteProxy) o;

        return rating == that.rating
                && !(pubkey != null ? !pubkey.equals(that.pubkey) : that.pubkey != null);

    }

    @Override
    public String toString() {
        return "RemoteProxy{" +
                "iNetAddress=" + iNetAddress +
                ", pubkey='" + pubkey + '\'' +
                '}';
    }
}
